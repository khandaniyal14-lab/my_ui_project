================================================================================
                    MANUAL STEPS TO CREATE .EXE FILE FROM FLASK PROJECT
                    Africa House Pakistan Trade Portal
================================================================================

OVERVIEW:
This guide provides step-by-step instructions to manually create a standalone 
executable (.exe) file from your Flask web application using PyInstaller.

PREREQUISITES:
- Python 3.8+ installed
- Your Flask project working correctly
- Command prompt/terminal access
- Administrator privileges (recommended)

================================================================================
                              STEP 1: PREPARE ENVIRONMENT
================================================================================

1.1 OPEN COMMAND PROMPT
    - Press Windows + R
    - Type "cmd" and press Enter
    - Or search "Command Prompt" in Start menu

1.2 NAVIGATE TO YOUR PROJECT FOLDER
    cd "C:\Users\Hp\Documents\augment-projects\backend website\my_ui_project"

1.3 VERIFY PYTHON INSTALLATION
    python --version
    (Should show Python 3.8 or higher)

1.4 VERIFY YOUR FLASK APP WORKS
    python app.py
    (Open browser to http://localhost:5000 to test)
    (Press Ctrl+C to stop the server)

================================================================================
                              STEP 2: INSTALL PYINSTALLER
================================================================================

2.1 INSTALL PYINSTALLER
    pip install pyinstaller

2.2 VERIFY INSTALLATION
    pyinstaller --version
    (Should show PyInstaller version)

2.3 INSTALL ADDITIONAL DEPENDENCIES (if needed)
    pip install -r requirements.txt

================================================================================
                              STEP 3: PREPARE PROJECT FILES
================================================================================

3.1 ENSURE ALL REQUIRED FILES ARE PRESENT
    Check these files exist in your project folder:
    - app.py (main Flask application)
    - templates/ folder (HTML templates)
    - static/ folder (CSS, JS, images)
    - database.db (user database)
    - companies.db (company database)
    - .env (configuration file)
    - email_utils.py (email functions)

3.2 CREATE REQUIREMENTS FILE (if not exists)
    Create file: requirements_build.txt
    Content:
    Flask==2.3.3
    Flask-Mail==0.9.1
    Flask-CORS==4.0.0
    Flask-SQLAlchemy==3.0.5
    python-dotenv==1.0.0
    itsdangerous==2.1.2
    requests==2.31.0
    pyinstaller==6.3.0

3.3 INSTALL BUILD REQUIREMENTS
    pip install -r requirements_build.txt

================================================================================
                              STEP 4: CREATE PYINSTALLER SPEC FILE
================================================================================

4.1 CREATE SPEC FILE
    Create file: AfricaHousePakistan.spec
    
    Content:
    # -*- mode: python ; coding: utf-8 -*-

    block_cipher = None

    a = Analysis(
        ['app.py'],
        pathex=[],
        binaries=[],
        datas=[
            ('templates', 'templates'),
            ('static', 'static'),
            ('*.db', '.'),
            ('.env', '.'),
            ('*.txt', '.'),
            ('*.py', '.'),
        ],
        hiddenimports=[
            'flask',
            'flask_mail',
            'flask_cors',
            'flask_sqlalchemy',
            'sqlite3',
            'requests',
            'email_utils',
            'dotenv',
            'itsdangerous',
            'jinja2',
            'werkzeug',
            'markupsafe',
            'click',
            'blinker',
        ],
        hookspath=[],
        hooksconfig={},
        runtime_hooks=[],
        excludes=[],
        win_no_prefer_redirects=False,
        win_private_assemblies=False,
        cipher=block_cipher,
        noarchive=False,
    )

    pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

    exe = EXE(
        pyz,
        a.scripts,
        a.binaries,
        a.zipfiles,
        a.datas,
        [],
        name='AfricaHousePakistan',
        debug=False,
        bootloader_ignore_signals=False,
        strip=False,
        upx=True,
        upx_exclude=[],
        runtime_tmpdir=None,
        console=True,
        disable_windowed_traceback=False,
        argv_emulation=False,
        target_arch=None,
        codesign_identity=None,
        entitlements_file=None,
        icon=None,
    )

================================================================================
                              STEP 5: BUILD THE EXECUTABLE
================================================================================

5.1 CLEAN PREVIOUS BUILDS (if any)
    rmdir /s dist
    rmdir /s build
    del *.spec

5.2 BUILD USING SPEC FILE
    pyinstaller --clean AfricaHousePakistan.spec

    OR

5.3 BUILD USING COMMAND LINE (Alternative)
    pyinstaller --onefile ^
        --add-data "templates;templates" ^
        --add-data "static;static" ^
        --add-data "*.db;." ^
        --add-data ".env;." ^
        --hidden-import=flask ^
        --hidden-import=flask_mail ^
        --hidden-import=flask_cors ^
        --hidden-import=flask_sqlalchemy ^
        --hidden-import=sqlite3 ^
        --hidden-import=requests ^
        --hidden-import=email_utils ^
        --hidden-import=dotenv ^
        --name "AfricaHousePakistan" ^
        app.py

5.4 WAIT FOR BUILD TO COMPLETE
    - This may take 5-15 minutes
    - You'll see lots of output
    - Wait for "Building EXE from EXE-00.toc completed successfully"

================================================================================
                              STEP 6: COPY ADDITIONAL FILES
================================================================================

6.1 COPY DATABASE FILES
    copy database.db dist\
    copy companies.db dist\

6.2 COPY CONFIGURATION
    copy .env dist\

6.3 COPY DOCUMENTATION
    copy *.txt dist\

================================================================================
                              STEP 7: CREATE LAUNCHER SCRIPT
================================================================================

7.1 CREATE BATCH FILE
    Create file: dist\start_server.bat
    
    Content:
    @echo off
    echo Starting Africa House Pakistan Trade Portal...
    echo.
    echo The application will start on http://localhost:5000
    echo Press Ctrl+C to stop the server
    echo.
    
    REM Start the Flask application
    AfricaHousePakistan.exe
    
    pause

================================================================================
                              STEP 8: CREATE USER INSTRUCTIONS
================================================================================

8.1 CREATE README FILE
    Create file: dist\README.txt
    
    Content:
    # Africa House Pakistan Trade Portal - Executable
    
    ## How to Run
    
    1. Double-click `start_server.bat` to start the application
       OR
       Run `AfricaHousePakistan.exe` directly
    
    2. Open your web browser and go to: http://localhost:5000
    
    3. The application will start with all features:
       - User registration and login
       - AI Assistant
       - Company database
       - Dashboard and profiles
    
    ## Files Included
    
    - AfricaHousePakistan.exe - Main application
    - start_server.bat - Easy launcher script
    - .env - Configuration file
    - database.db - User database
    - companies.db - Company database
    
    ## Troubleshooting
    
    1. If the application doesn't start:
       - Check that port 5000 is not in use
       - Run as administrator if needed
       - Check .env file for correct configuration
    
    2. If email verification doesn't work:
       - Update SMTP settings in .env file
       - Check internet connection
    
    Enjoy using Africa House Pakistan Trade Portal!

================================================================================
                              STEP 9: TEST THE EXECUTABLE
================================================================================

9.1 NAVIGATE TO DIST FOLDER
    cd dist

9.2 TEST DIRECT EXECUTION
    AfricaHousePakistan.exe
    (Should start the server)

9.3 TEST LAUNCHER SCRIPT
    start_server.bat
    (Should start with nice messages)

9.4 TEST IN BROWSER
    - Open browser
    - Go to http://localhost:5000
    - Test login, signup, AI assistant
    - Verify all features work

9.5 STOP THE SERVER
    - Press Ctrl+C in command prompt
    - Or close the command prompt window

================================================================================
                              STEP 10: PACKAGE FOR DISTRIBUTION
================================================================================

10.1 CREATE DISTRIBUTION FOLDER
    mkdir "Africa_House_Pakistan_Portable"

10.2 COPY ALL NECESSARY FILES
    copy AfricaHousePakistan.exe "Africa_House_Pakistan_Portable\"
    copy start_server.bat "Africa_House_Pakistan_Portable\"
    copy .env "Africa_House_Pakistan_Portable\"
    copy database.db "Africa_House_Pakistan_Portable\"
    copy companies.db "Africa_House_Pakistan_Portable\"
    copy README.txt "Africa_House_Pakistan_Portable\"

10.3 CREATE ZIP FILE
    - Right-click on "Africa_House_Pakistan_Portable" folder
    - Select "Send to" > "Compressed (zipped) folder"
    - Name it "Africa_House_Pakistan_v1.0.zip"

================================================================================
                              TROUBLESHOOTING COMMON ISSUES
================================================================================

ISSUE: "Module not found" during build
SOLUTION: Add missing modules to hiddenimports in spec file

ISSUE: "File not found" during build
SOLUTION: Ensure all files exist and paths are correct in datas section

ISSUE: Executable doesn't start
SOLUTION: 
- Run from command prompt to see error messages
- Check if all .dll files are included
- Try running as administrator

ISSUE: "Port already in use"
SOLUTION: 
- Close other applications using port 5000
- Change port in app.py if needed

ISSUE: Templates not found
SOLUTION: Ensure templates folder is correctly included in datas

ISSUE: Database not found
SOLUTION: Ensure .db files are in same folder as .exe

ISSUE: Large file size
SOLUTION: Use --exclude-module to remove unused modules

================================================================================
                              ADVANCED OPTIONS
================================================================================

ADD CUSTOM ICON:
--icon=path\to\icon.ico

HIDE CONSOLE WINDOW:
--windowed
(Note: You'll lose error messages)

EXCLUDE MODULES:
--exclude-module=module_name

ONE DIRECTORY MODE:
Remove --onefile flag for faster startup

OPTIMIZE SIZE:
--strip --upx

================================================================================
                              FINAL CHECKLIST
================================================================================

✓ Python and PyInstaller installed
✓ All project files present
✓ Spec file created correctly
✓ Build completed successfully
✓ Database files copied
✓ Configuration files copied
✓ Launcher script created
✓ README instructions created
✓ Executable tested and working
✓ Package ready for distribution

================================================================================
                              SUPPORT NOTES
================================================================================

- The executable is self-contained but needs database files
- Configuration can be changed by editing .env file
- Application runs locally on user's machine
- No internet required except for email and AI features
- Database is portable and can be backed up

For additional help, check the console output for specific error messages.

================================================================================
